<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jusfoun.hookah.core.dao.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.jusfoun.hookah.core.domain.Comment" >
    <id column="comm_id" property="commId" jdbcType="VARCHAR" />
    <result column="comment_level" property="commentLevel" jdbcType="INTEGER" />
    <result column="goods_id" property="goodsId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="goods_comment_grade" property="goodsCommentGrade" jdbcType="BIGINT" />
    <result column="comment_time" property="commentTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="add_time" property="addTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="praise" property="praise" jdbcType="BIGINT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jusfoun.hookah.core.domain.vo.CommentVo" extends="BaseResultMap" >
    <result column="comment_content" property="commentContent" jdbcType="LONGVARCHAR" />
    <result column="user_name" property="username" jdbcType="VARCHAR" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
  </resultMap>
  <sql id="Base_Column_List" >
    comm_id, comment_level, goods_id, user_id, order_id, goods_comment_grade, comment_time,
    add_time, update_time, praise
  </sql>
  <sql id="Blob_Column_List" >
    comment_content
  </sql>
  <sql id="Column_List_Vo">
    username
  </sql>

  <!-- 获取商品平均分 并取一位小数-->
  <select id="selectGoodsAvgByGoodsId" resultType="java.lang.Double">
      SELECT ROUND(AVG(c.goods_comment_grade), 1) FROM `comment` c WHERE goods_id = #{goodsId} AND status = 1
  </select>

  <!-- 获取时间段内有评论的商品ID集合 -->
  <select id="selectGoodsIdsByData" resultType="java.lang.String">
    SELECT DISTINCT goods_id FROM `comment` c WHERE add_time BETWEEN #{startTime} AND #{endTime} AND status = 1
  </select>

 <select id="getListForComment" resultMap="ResultMapWithBLOBs">
    SELECT
      c.comm_id,
      c.comment_level,
      c.goods_id,
      c.user_id,
      c.order_id,
      c.goods_comment_grade,
      c.comment_time,
      c.add_time,
      c.update_time,
      c.praise,
      c. comment_content,
      u.user_name
    FROM `comment` c
    left JOIN `user` u on c.user_id = u.user_id
    WHERE c.status = 1
   <if test="goodsId != '' and goodsId != null">
     AND c.goods_id = #{goodsId}
   </if>
   ORDER BY comment_time DESC
 </select>

  <sql id="SelectConditions">
    FROM  comment c
    left JOIN goods g on c.goods_id = g.goods_id
    left JOIN user u on c.user_id = u.user_id
    WHERE 1=1

    <if test="status != null and status !=''">
      c.status = #{status}
    </if>
    <if test="goodsCommentGrade != null and goodsCommentGrade !=''">
      c.goods_comment_grade = #{goodsCommentGrade}
    </if>
    <if test="orderId != null and orderId !=''">
      c.order_id = #{orderId}
    </if>
    <if test="goodsName != null and goodsName !=''">
      g.goodsName like CONCAT(CONCAT('%', #{goodsName}),'%')
    </if>
    <if test="commentContent != null and commentContent !=''">
      c.comment_content like CONCAT(CONCAT('%', #{commentContent}),'%')
    </if>
    <if test="startTime != null and startTime !=''">
      c.add_time <![CDATA[  >=  ]]> #{startTime}
    </if>
    <if test="endTime != null and endTime !=''">
      c.add_time <![CDATA[  <=  ]]> #{endTime}
    </if>
  </sql>

  <select id="selectCountByCondition" resultType="java.lang.Integer">
    SELECT  COUNT(c.comm_id)    <include refid="SelectConditions"/>
  </select>

  <!-- 通过条件动态分页查询评论，用于评论审核 -->
  <select id="selectCommentsByCondition" resultMap="ResultMapWithBLOBs">
    SELECT  c.comm_id,
      c.comment_level,
      c.goods_id,
      c.user_id,
      c.order_id,
      c.goods_comment_grade,
      c.comment_time,
      c.status,
      c.add_time,
      c.update_time,
      c.praise,
      c. comment_content,
      g.goods_name,
      u.user_name

      <include refid="SelectConditions"/>

      ORDER BY c.add_time DESC   limit #{startIndex},#{pageSize}

  </select>
  <update id="checkCommentByIds" >

    UPDATE comment SET status = #{status}

    WHERE   comm_id IN

    <foreach collection="ids" index="index" item="item" open="("  separator="," close=")">
      #{item}
    </foreach>

  </update>
</mapper>