server:
  port: 9100
  http:
    protocal: http://
  session:
    cookie:
      domain: lsdashuju.net
      name: hookah_sid
spring:
  datasource:
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.1.201:3306/hookah?&characterEncoding=utf8&autoReconnect=true&useSSL=false
    username: root
    password: Jusfoun@123
    initialize: true
    type: com.alibaba.druid.pool.DruidDataSource
    # 连接池配置
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: false
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  data:
    mongodb:
      uri:  mongodb://192.168.1.201:27017/hookah
  rabbitmq:
    addresses: 192.168.1.201:5672
    username: root
    password: password
    publisher-confirms: true
    virtual-host: /
  mail:
      host: smtp.lsdashuju.net
      username: service@qddata.com.cn
      password: Bigdata8661101
      transport:
        protocol: smtp
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            socketFactory:
              fallback: false
#  jpa:
#    database: MYSQL
#    show-sql: true
##    hibernate:
##      ddl-auto: create-drop
#    properties:
#      hibernate:
#        dialect : org.hibernate.dialect.MySQL5Dialect
  mvc:
    static-path-pattern: /static/**
myconf:
  beetl:
    templatesPath: views/
    contentType: text/html;charset:UTF-8
    prefix:
    suffix: .html
    cache: false
  host:
    domain: lsdashuju.net
    website: ${server.http.protocal}www.lsdashuju.net
    static: ${server.http.protocal}static.lsdashuju.net
    auth: ${server.http.protocal}auth.lsdashuju.net
    console: ${server.http.protocal}console.lsdashuju.net
    crowd: ${server.http.protocal}crowd.lsdashuju.net
  oauth2:
    clientId: admin
    clientSecret: Yqn2ht4DYkMHlDvTY7CV
    regUrl: http://auth.lsdashuju.net/reg
    loginUrl: http://auth.lsdashuju.net/oauth/authorize?client_id=admin&response_type=code&redirect_uri=http://admin.lsdashuju.net/home
    logoutUrl: http://auth.lsdashuju.net/logout?redirect_uri=http://www.lsdashuju.net/login
    accessTokenUrl: http://auth.lsdashuju.net/oauth/accessToken
    userInfoUrl: http://auth.lsdashuju.net/userInfo
    redirectUrl: http://auth.lsdashuju.net/login
  api:
    url: http://202.106.10.250:5555/gateway/insert
    tokenUrl: http://202.106.10.250:5555/gateway/getToken
    changeUrl: http://202.106.10.250:5555/gateway/changeToken
    apiRestUrl: http://202.106.10.250:28070/apirest/findInvokeStatus
    wrapperUrl: http:// 202.106.10.250:5555
    apiDetailsUrl: http://202.106.10.250:28070/apirest/findByUrl?url=
  redis:
    ipPort: 192.168.1.201:7000,192.168.1.201:7001,192.168.1.201:7002
    password: bdgstore
  consul:
    ipPort: localhost:8500
  es:
    ipPort: 192.168.1.201:9300
    cluster:
      name: qingdao-es
    clientTransport:
      sniff: true
      ignore_cluster_name: false
      ping_timeout: 5s
      nodes_sampler_interval: 5s
    goods:
      index: sbh-goods-v1
      type: goods
      shards: 4
      replicas: 1
    category:
      index: sbh-category-v1
      type: category
      shards: 2
      replicas: 1
  operateMobileNo: 13290603059,13810168006
debug: true