server:
  port: 9698
  http:
    protocal: http://
  session:
    cookie:
      domain: pybdex.com
      name: hookah_sid
spring:
  datasource:
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.15.116:3306/hookah?&characterEncoding=utf8&autoReconnect=true&useSSL=false
    username: root
    password: Jusfoun@123
    initialize: true
    type: com.alibaba.druid.pool.DruidDataSource
    # 连接池配置
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: false
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  data:
    mongodb:
      uri:  mongodb://192.168.15.116:27017/hookah
  rabbitmq:
    addresses: 192.168.15.116:5672
    username: root
    password: password
    publisher-confirms: true
    virtual-host: /
  mail:
      host: smtp.pybdex.com
      username: service@qddata.com.cn
      password: Bigdata8661101
      transport:
        protocol: smtp
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            socketFactory:
              fallback: false
  mvc:
    static-path-pattern: /static/**
myconf:
  beetl:
    templatesPath: views/
    contentType: text/html;charset:UTF-8
    prefix: /
    suffix: .html
    cache: false
  host:
    domain: pybdex.com
    website: ${server.http.protocal}www.pybdex.com
    static: ${server.http.protocal}static.pybdex.com
    auth: ${server.http.protocal}auth.pybdex.com
    console: ${server.http.protocal}console.pybdex.com
    admin: ${server.http.protocal}admin.pybdex.com
    crowd: ${server.http.protocal}crowd.pybdex.com
  oauth2:
    clientId: crowd
    clientSecret: Yqn2ht4DYkMHlDvTY7CV
    regUrl: http://auth.pybdex.com/reg
    loginUrl: http://auth.pybdex.com/oauth/authorize?client_id=crowd&response_type=code&redirect_uri=
    logoutUrl: http://auth.pybdex.com/logout?redirect_uri=http://www.pybdex.com/login
    accessTokenUrl: http://auth.pybdex.com/oauth/accessToken
    userInfoUrl: http://auth.pybdex.com/userInfo
    redirectUrl: http://auth.pybdex.com/login
  redis:
    ipPort: 192.168.15.116:7000,192.168.15.116:7001,192.168.15.116:7002
    password: bdgstore
  consul:
    ipPort: localhost:8500
debug: true